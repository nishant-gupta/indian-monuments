// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
  favorites     Favorite[]
}

model Monument {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String
  history     String
  location    String
  address     String
  city        String
  state       String
  country     String
  latitude    Float?
  longitude   Float?
  entryFee    String
  timings     String
  bestTime    String
  howToReach  String
  facilities  String
  type        MonumentType @default(HISTORICAL)
  period      MonumentPeriod?
  region      Region    @default(ASIA)
  popularity  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  images      Image[]
  reviews     Review[]
  favorites   Favorite[]
  categories  Category[]
  tags        Tag[]
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  monuments Monument[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  monuments Monument[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  monument  Monument @relation(fields: [monumentId], references: [id], onDelete: Cascade)
  monumentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  monument  Monument @relation(fields: [monumentId], references: [id], onDelete: Cascade)
  monumentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  monument  Monument @relation(fields: [monumentId], references: [id], onDelete: Cascade)
  monumentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, monumentId])
}

enum Role {
  USER
  ADMIN
}

enum MonumentType {
  HISTORICAL
  UNESCO
  ANCIENT
  MEDIEVAL
  MODERN
}

enum MonumentPeriod {
  ANCIENT
  MEDIEVAL
  MODERN
}

enum Region {
  ASIA
  EUROPE
  AMERICAS
  AFRICA
  OCEANIA
}
